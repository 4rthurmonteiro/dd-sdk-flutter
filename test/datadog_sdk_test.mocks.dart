// Mocks generated by Mockito 5.0.16 from annotations
// in datadog_sdk/example/ios/.symlinks/plugins/datadog_sdk/integration_test_app/ios/.symlinks/plugins/datadog_sdk/test/datadog_sdk_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:datadog_sdk/datadog_sdk.dart' as _i4;
import 'package:datadog_sdk/datadog_sdk_platform_interface.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

import 'datadog_sdk_test.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unnecessary_overrides
// ignore_for_file: camel_case_types

/// A class which mocks [MixedDatadogSdkPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockMixedDatadogSdkPlatform extends _i1.Mock
    implements _i2.MixedDatadogSdkPlatform {
  MockMixedDatadogSdkPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
  @override
  _i3.Future<void> setSdkVerbosity(_i4.Verbosity? verbosity) =>
      (super.noSuchMethod(Invocation.method(#setSdkVerbosity, [verbosity]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> setTrackingConsent(_i4.TrackingConsent? trackingConsent) =>
      (super.noSuchMethod(
          Invocation.method(#setTrackingConsent, [trackingConsent]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> setUserInfo(String? id, String? name, String? email,
          Map<String, dynamic>? extraInfo) =>
      (super.noSuchMethod(
          Invocation.method(#setUserInfo, [id, name, email, extraInfo]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> initialize(_i4.DdSdkConfiguration? configuration,
          {_i5.LogCallback? logCallback}) =>
      (super.noSuchMethod(
          Invocation.method(
              #initialize, [configuration], {#logCallback: logCallback}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
