// Mocks generated by Mockito 5.0.16 from annotations
// in datadog_sdk/example/ios/.symlinks/plugins/datadog_sdk/integration_test_app/ios/.symlinks/plugins/datadog_sdk/test/logs/ddlogs_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;

import 'ddlogs_test.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [MixedDdLogsPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockMixedDdLogsPlatform extends _i1.Mock
    implements _i2.MixedDdLogsPlatform {
  MockMixedDdLogsPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
  @override
  _i3.Future<void> debug(String? message,
          [Map<String, Object?>? context = const {}]) =>
      (super.noSuchMethod(Invocation.method(#debug, [message, context]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> info(String? message,
          [Map<String, Object?>? context = const {}]) =>
      (super.noSuchMethod(Invocation.method(#info, [message, context]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> warn(String? message,
          [Map<String, Object?>? context = const {}]) =>
      (super.noSuchMethod(Invocation.method(#warn, [message, context]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> error(String? message,
          [Map<String, Object?>? context = const {}]) =>
      (super.noSuchMethod(Invocation.method(#error, [message, context]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> addAttribute(String? key, Object? value) =>
      (super.noSuchMethod(Invocation.method(#addAttribute, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> removeAttribute(String? key) =>
      (super.noSuchMethod(Invocation.method(#removeAttribute, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> addTag(String? tag, [String? value]) =>
      (super.noSuchMethod(Invocation.method(#addTag, [tag, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> removeTag(String? tag) =>
      (super.noSuchMethod(Invocation.method(#removeTag, [tag]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> removeTagWithKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#removeTagWithKey, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
